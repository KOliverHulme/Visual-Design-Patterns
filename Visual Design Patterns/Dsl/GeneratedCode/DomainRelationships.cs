//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace VisualDesignPatterns
{
	/// <summary>
	/// DomainRelationship DesignHasDesignPatterns
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("VisualDesignPatterns.DesignHasDesignPatterns.DisplayName", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("VisualDesignPatterns.DesignHasDesignPatterns.Description", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::VisualDesignPatterns.DesiDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e6919f8f-4d2a-4fe0-ac21-fd6df44fcede")]
	public partial class DesignHasDesignPatterns : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DesignHasDesignPatterns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe6919f8f, 0x4d2a, 0x4fe0, 0xac, 0x21, 0xfd, 0x6d, 0xf4, 0x4f, 0xce, 0xde);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DesignHasDesignPatterns link in the same Partition as the given Design
		/// </summary>
		/// <param name="source">Design to use as the source of the relationship.</param>
		/// <param name="target">DesignPattern to use as the target of the relationship.</param>
		public DesignHasDesignPatterns(Design source, DesignPattern target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DesignHasDesignPatterns.DesignDomainRoleId, source), new DslModeling::RoleAssignment(DesignHasDesignPatterns.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignHasDesignPatterns(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignHasDesignPatterns(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignHasDesignPatterns(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignHasDesignPatterns(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Design domain role code
		
		/// <summary>
		/// Design domain role Id.
		/// </summary>
		public static readonly global::System.Guid DesignDomainRoleId = new global::System.Guid(0x0d05f3f9, 0x809d, 0x4dcb, 0xa6, 0xfc, 0x25, 0xf0, 0x73, 0xfe, 0x0f, 0x4d);
		
		/// <summary>
		/// DomainRole Design
		/// </summary>
		[DslDesign::DisplayNameResource("VisualDesignPatterns.DesignHasDesignPatterns/Design.DisplayName", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("VisualDesignPatterns.DesignHasDesignPatterns/Design.Description", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DesignPatterns", PropertyDisplayNameKey="VisualDesignPatterns.DesignHasDesignPatterns/Design.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0d05f3f9-809d-4dcb-a6fc-25f073fe0f4d")]
		public virtual Design Design
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Design)DslModeling::DomainRoleInfo.GetRolePlayer(this, DesignDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DesignDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Design of a DesignPattern
		/// <summary>
		/// Gets Design.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Design GetDesign(DesignPattern element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as Design;
		}
		
		/// <summary>
		/// Sets Design.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDesign(DesignPattern element, Design newDesign)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newDesign);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x1430deb8, 0xfdda, 0x43b0, 0xac, 0xe3, 0xd2, 0x9e, 0x17, 0xb2, 0xec, 0x86);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("VisualDesignPatterns.DesignHasDesignPatterns/Element.DisplayName", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("VisualDesignPatterns.DesignHasDesignPatterns/Element.Description", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Design", PropertyDisplayNameKey="VisualDesignPatterns.DesignHasDesignPatterns/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1430deb8-fdda-43b0-ace3-d29e17b2ec86")]
		public virtual DesignPattern Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DesignPattern)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DesignPatterns of a Design
		/// <summary>
		/// Gets a list of DesignPatterns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DesignPattern> GetDesignPatterns(Design element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DesignPattern>, DesignPattern>(element, DesignDomainRoleId);
		}
		#endregion
		#region Design link accessor
		/// <summary>
		/// Get the list of DesignHasDesignPatterns links to a Design.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::VisualDesignPatterns.DesignHasDesignPatterns> GetLinksToDesignPatterns ( global::VisualDesignPatterns.Design designInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::VisualDesignPatterns.DesignHasDesignPatterns>(designInstance, global::VisualDesignPatterns.DesignHasDesignPatterns.DesignDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the DesignHasDesignPatterns link to a DesignPattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::VisualDesignPatterns.DesignHasDesignPatterns GetLinkToDesign (global::VisualDesignPatterns.DesignPattern elementInstance)
		{
			global::System.Collections.Generic.IList<global::VisualDesignPatterns.DesignHasDesignPatterns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::VisualDesignPatterns.DesignHasDesignPatterns>(elementInstance, global::VisualDesignPatterns.DesignHasDesignPatterns.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DesignHasDesignPatterns instance accessors
		
		/// <summary>
		/// Get any DesignHasDesignPatterns links between a given Design and a DesignPattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::VisualDesignPatterns.DesignHasDesignPatterns> GetLinks( global::VisualDesignPatterns.Design source, global::VisualDesignPatterns.DesignPattern target )
		{
			global::System.Collections.Generic.List<global::VisualDesignPatterns.DesignHasDesignPatterns> outLinks = new global::System.Collections.Generic.List<global::VisualDesignPatterns.DesignHasDesignPatterns>();
			global::System.Collections.Generic.IList<global::VisualDesignPatterns.DesignHasDesignPatterns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::VisualDesignPatterns.DesignHasDesignPatterns>(source, global::VisualDesignPatterns.DesignHasDesignPatterns.DesignDomainRoleId);
			foreach ( global::VisualDesignPatterns.DesignHasDesignPatterns link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DesignHasDesignPatterns link between a given Designand a DesignPattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::VisualDesignPatterns.DesignHasDesignPatterns GetLink( global::VisualDesignPatterns.Design source, global::VisualDesignPatterns.DesignPattern target )
		{
			global::System.Collections.Generic.IList<global::VisualDesignPatterns.DesignHasDesignPatterns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::VisualDesignPatterns.DesignHasDesignPatterns>(source, global::VisualDesignPatterns.DesignHasDesignPatterns.DesignDomainRoleId);
			foreach ( global::VisualDesignPatterns.DesignHasDesignPatterns link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace VisualDesignPatterns
{
	/// <summary>
	/// DomainRelationship DesignPatternHasAbstractClasses
	/// Description for VisualDesignPatterns.DesignPatternHasAbstractClasses
	/// </summary>
	[DslDesign::DisplayNameResource("VisualDesignPatterns.DesignPatternHasAbstractClasses.DisplayName", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("VisualDesignPatterns.DesignPatternHasAbstractClasses.Description", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::VisualDesignPatterns.DesiDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("15f3b78e-defb-465f-bcb2-ebdd453eb711")]
	public partial class DesignPatternHasAbstractClasses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DesignPatternHasAbstractClasses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x15f3b78e, 0xdefb, 0x465f, 0xbc, 0xb2, 0xeb, 0xdd, 0x45, 0x3e, 0xb7, 0x11);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DesignPatternHasAbstractClasses link in the same Partition as the given DesignPattern
		/// </summary>
		/// <param name="source">DesignPattern to use as the source of the relationship.</param>
		/// <param name="target">AbstractClass to use as the target of the relationship.</param>
		public DesignPatternHasAbstractClasses(DesignPattern source, AbstractClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DesignPatternHasAbstractClasses.DesignPatternDomainRoleId, source), new DslModeling::RoleAssignment(DesignPatternHasAbstractClasses.AbstractClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignPatternHasAbstractClasses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignPatternHasAbstractClasses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignPatternHasAbstractClasses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignPatternHasAbstractClasses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DesignPattern domain role code
		
		/// <summary>
		/// DesignPattern domain role Id.
		/// </summary>
		public static readonly global::System.Guid DesignPatternDomainRoleId = new global::System.Guid(0xf20d92c7, 0x036a, 0x4c57, 0x8d, 0xdc, 0x23, 0x1c, 0x86, 0x72, 0xbc, 0x0b);
		
		/// <summary>
		/// DomainRole DesignPattern
		/// Description for
		/// VisualDesignPatterns.DesignPatternHasAbstractClasses.DesignPattern
		/// </summary>
		[DslDesign::DisplayNameResource("VisualDesignPatterns.DesignPatternHasAbstractClasses/DesignPattern.DisplayName", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("VisualDesignPatterns.DesignPatternHasAbstractClasses/DesignPattern.Description", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AbstractClasses", PropertyDisplayNameKey="VisualDesignPatterns.DesignPatternHasAbstractClasses/DesignPattern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f20d92c7-036a-4c57-8ddc-231c8672bc0b")]
		public virtual DesignPattern DesignPattern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DesignPattern)DslModeling::DomainRoleInfo.GetRolePlayer(this, DesignPatternDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DesignPatternDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DesignPattern of a AbstractClass
		/// <summary>
		/// Gets DesignPattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DesignPattern GetDesignPattern(AbstractClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AbstractClassDomainRoleId) as DesignPattern;
		}
		
		/// <summary>
		/// Sets DesignPattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDesignPattern(AbstractClass element, DesignPattern newDesignPattern)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AbstractClassDomainRoleId, newDesignPattern);
		}
		#endregion
		#region AbstractClass domain role code
		
		/// <summary>
		/// AbstractClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbstractClassDomainRoleId = new global::System.Guid(0xa5a3da9c, 0xcf81, 0x4084, 0x92, 0xfc, 0x64, 0x87, 0x41, 0x88, 0x0b, 0x99);
		
		/// <summary>
		/// DomainRole AbstractClass
		/// Description for
		/// VisualDesignPatterns.DesignPatternHasAbstractClasses.AbstractClass
		/// </summary>
		[DslDesign::DisplayNameResource("VisualDesignPatterns.DesignPatternHasAbstractClasses/AbstractClass.DisplayName", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("VisualDesignPatterns.DesignPatternHasAbstractClasses/AbstractClass.Description", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DesignPattern", PropertyDisplayNameKey="VisualDesignPatterns.DesignPatternHasAbstractClasses/AbstractClass.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a5a3da9c-cf81-4084-92fc-648741880b99")]
		public virtual AbstractClass AbstractClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbstractClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbstractClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbstractClasses of a DesignPattern
		/// <summary>
		/// Gets a list of AbstractClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AbstractClass> GetAbstractClasses(DesignPattern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractClass>, AbstractClass>(element, DesignPatternDomainRoleId);
		}
		#endregion
		#region DesignPattern link accessor
		/// <summary>
		/// Get the list of DesignPatternHasAbstractClasses links to a DesignPattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::VisualDesignPatterns.DesignPatternHasAbstractClasses> GetLinksToAbstractClasses ( global::VisualDesignPatterns.DesignPattern designPatternInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::VisualDesignPatterns.DesignPatternHasAbstractClasses>(designPatternInstance, global::VisualDesignPatterns.DesignPatternHasAbstractClasses.DesignPatternDomainRoleId);
		}
		#endregion
		#region AbstractClass link accessor
		/// <summary>
		/// Get the DesignPatternHasAbstractClasses link to a AbstractClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::VisualDesignPatterns.DesignPatternHasAbstractClasses GetLinkToDesignPattern (global::VisualDesignPatterns.AbstractClass abstractClassInstance)
		{
			global::System.Collections.Generic.IList<global::VisualDesignPatterns.DesignPatternHasAbstractClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::VisualDesignPatterns.DesignPatternHasAbstractClasses>(abstractClassInstance, global::VisualDesignPatterns.DesignPatternHasAbstractClasses.AbstractClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AbstractClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DesignPatternHasAbstractClasses instance accessors
		
		/// <summary>
		/// Get any DesignPatternHasAbstractClasses links between a given DesignPattern and a AbstractClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::VisualDesignPatterns.DesignPatternHasAbstractClasses> GetLinks( global::VisualDesignPatterns.DesignPattern source, global::VisualDesignPatterns.AbstractClass target )
		{
			global::System.Collections.Generic.List<global::VisualDesignPatterns.DesignPatternHasAbstractClasses> outLinks = new global::System.Collections.Generic.List<global::VisualDesignPatterns.DesignPatternHasAbstractClasses>();
			global::System.Collections.Generic.IList<global::VisualDesignPatterns.DesignPatternHasAbstractClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::VisualDesignPatterns.DesignPatternHasAbstractClasses>(source, global::VisualDesignPatterns.DesignPatternHasAbstractClasses.DesignPatternDomainRoleId);
			foreach ( global::VisualDesignPatterns.DesignPatternHasAbstractClasses link in links )
			{
				if ( target.Equals(link.AbstractClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DesignPatternHasAbstractClasses link between a given DesignPatternand a AbstractClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::VisualDesignPatterns.DesignPatternHasAbstractClasses GetLink( global::VisualDesignPatterns.DesignPattern source, global::VisualDesignPatterns.AbstractClass target )
		{
			global::System.Collections.Generic.IList<global::VisualDesignPatterns.DesignPatternHasAbstractClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::VisualDesignPatterns.DesignPatternHasAbstractClasses>(source, global::VisualDesignPatterns.DesignPatternHasAbstractClasses.DesignPatternDomainRoleId);
			foreach ( global::VisualDesignPatterns.DesignPatternHasAbstractClasses link in links )
			{
				if ( target.Equals(link.AbstractClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace VisualDesignPatterns
{
	/// <summary>
	/// DomainRelationship DesignPatternHasConcreteClasses
	/// Description for VisualDesignPatterns.DesignPatternHasConcreteClasses
	/// </summary>
	[DslDesign::DisplayNameResource("VisualDesignPatterns.DesignPatternHasConcreteClasses.DisplayName", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("VisualDesignPatterns.DesignPatternHasConcreteClasses.Description", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::VisualDesignPatterns.DesiDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9c4fac4c-2788-4260-b59e-32f339a5b374")]
	public partial class DesignPatternHasConcreteClasses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DesignPatternHasConcreteClasses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9c4fac4c, 0x2788, 0x4260, 0xb5, 0x9e, 0x32, 0xf3, 0x39, 0xa5, 0xb3, 0x74);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DesignPatternHasConcreteClasses link in the same Partition as the given DesignPattern
		/// </summary>
		/// <param name="source">DesignPattern to use as the source of the relationship.</param>
		/// <param name="target">ConcreteClass to use as the target of the relationship.</param>
		public DesignPatternHasConcreteClasses(DesignPattern source, ConcreteClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DesignPatternHasConcreteClasses.DesignPatternDomainRoleId, source), new DslModeling::RoleAssignment(DesignPatternHasConcreteClasses.ConcreteClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignPatternHasConcreteClasses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignPatternHasConcreteClasses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignPatternHasConcreteClasses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignPatternHasConcreteClasses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DesignPattern domain role code
		
		/// <summary>
		/// DesignPattern domain role Id.
		/// </summary>
		public static readonly global::System.Guid DesignPatternDomainRoleId = new global::System.Guid(0x405711dd, 0xfeda, 0x45be, 0xa9, 0x03, 0xa3, 0x81, 0xd4, 0x5b, 0xa9, 0x16);
		
		/// <summary>
		/// DomainRole DesignPattern
		/// Description for
		/// VisualDesignPatterns.DesignPatternHasConcreteClasses.DesignPattern
		/// </summary>
		[DslDesign::DisplayNameResource("VisualDesignPatterns.DesignPatternHasConcreteClasses/DesignPattern.DisplayName", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("VisualDesignPatterns.DesignPatternHasConcreteClasses/DesignPattern.Description", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConcreteClasses", PropertyDisplayNameKey="VisualDesignPatterns.DesignPatternHasConcreteClasses/DesignPattern.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("405711dd-feda-45be-a903-a381d45ba916")]
		public virtual DesignPattern DesignPattern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DesignPattern)DslModeling::DomainRoleInfo.GetRolePlayer(this, DesignPatternDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DesignPatternDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DesignPattern of a ConcreteClass
		/// <summary>
		/// Gets DesignPattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DesignPattern GetDesignPattern(ConcreteClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConcreteClassDomainRoleId) as DesignPattern;
		}
		
		/// <summary>
		/// Sets DesignPattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDesignPattern(ConcreteClass element, DesignPattern newDesignPattern)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConcreteClassDomainRoleId, newDesignPattern);
		}
		#endregion
		#region ConcreteClass domain role code
		
		/// <summary>
		/// ConcreteClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConcreteClassDomainRoleId = new global::System.Guid(0xe2e31e3b, 0x0ce5, 0x4ad0, 0xa9, 0x1e, 0xa9, 0x18, 0xe6, 0x99, 0x71, 0x2e);
		
		/// <summary>
		/// DomainRole ConcreteClass
		/// Description for
		/// VisualDesignPatterns.DesignPatternHasConcreteClasses.ConcreteClass
		/// </summary>
		[DslDesign::DisplayNameResource("VisualDesignPatterns.DesignPatternHasConcreteClasses/ConcreteClass.DisplayName", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("VisualDesignPatterns.DesignPatternHasConcreteClasses/ConcreteClass.Description", typeof(global::VisualDesignPatterns.DesiDomainModel), "VisualDesignPatterns.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DesignPattern", PropertyDisplayNameKey="VisualDesignPatterns.DesignPatternHasConcreteClasses/ConcreteClass.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e2e31e3b-0ce5-4ad0-a91e-a918e699712e")]
		public virtual ConcreteClass ConcreteClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConcreteClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConcreteClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConcreteClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConcreteClasses of a DesignPattern
		/// <summary>
		/// Gets a list of ConcreteClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConcreteClass> GetConcreteClasses(DesignPattern element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConcreteClass>, ConcreteClass>(element, DesignPatternDomainRoleId);
		}
		#endregion
		#region DesignPattern link accessor
		/// <summary>
		/// Get the list of DesignPatternHasConcreteClasses links to a DesignPattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::VisualDesignPatterns.DesignPatternHasConcreteClasses> GetLinksToConcreteClasses ( global::VisualDesignPatterns.DesignPattern designPatternInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::VisualDesignPatterns.DesignPatternHasConcreteClasses>(designPatternInstance, global::VisualDesignPatterns.DesignPatternHasConcreteClasses.DesignPatternDomainRoleId);
		}
		#endregion
		#region ConcreteClass link accessor
		/// <summary>
		/// Get the DesignPatternHasConcreteClasses link to a ConcreteClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::VisualDesignPatterns.DesignPatternHasConcreteClasses GetLinkToDesignPattern (global::VisualDesignPatterns.ConcreteClass concreteClassInstance)
		{
			global::System.Collections.Generic.IList<global::VisualDesignPatterns.DesignPatternHasConcreteClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::VisualDesignPatterns.DesignPatternHasConcreteClasses>(concreteClassInstance, global::VisualDesignPatterns.DesignPatternHasConcreteClasses.ConcreteClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConcreteClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DesignPatternHasConcreteClasses instance accessors
		
		/// <summary>
		/// Get any DesignPatternHasConcreteClasses links between a given DesignPattern and a ConcreteClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::VisualDesignPatterns.DesignPatternHasConcreteClasses> GetLinks( global::VisualDesignPatterns.DesignPattern source, global::VisualDesignPatterns.ConcreteClass target )
		{
			global::System.Collections.Generic.List<global::VisualDesignPatterns.DesignPatternHasConcreteClasses> outLinks = new global::System.Collections.Generic.List<global::VisualDesignPatterns.DesignPatternHasConcreteClasses>();
			global::System.Collections.Generic.IList<global::VisualDesignPatterns.DesignPatternHasConcreteClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::VisualDesignPatterns.DesignPatternHasConcreteClasses>(source, global::VisualDesignPatterns.DesignPatternHasConcreteClasses.DesignPatternDomainRoleId);
			foreach ( global::VisualDesignPatterns.DesignPatternHasConcreteClasses link in links )
			{
				if ( target.Equals(link.ConcreteClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DesignPatternHasConcreteClasses link between a given DesignPatternand a ConcreteClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::VisualDesignPatterns.DesignPatternHasConcreteClasses GetLink( global::VisualDesignPatterns.DesignPattern source, global::VisualDesignPatterns.ConcreteClass target )
		{
			global::System.Collections.Generic.IList<global::VisualDesignPatterns.DesignPatternHasConcreteClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::VisualDesignPatterns.DesignPatternHasConcreteClasses>(source, global::VisualDesignPatterns.DesignPatternHasConcreteClasses.DesignPatternDomainRoleId);
			foreach ( global::VisualDesignPatterns.DesignPatternHasConcreteClasses link in links )
			{
				if ( target.Equals(link.ConcreteClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
